#!/usr/bin/env python3
"""
summarize-logic.py  ▸  Generate a Markdown “Logic Index” for the whole site.

Usage:
    python summarize-logic.py [root] [-o OUTFILE] [--ignore path …]

Example:
    python summarize-logic.py . -o logic-index.md --ignore .git node_modules
"""

from __future__ import annotations

import argparse
import datetime as _dt
import json
import os
import re
import sys
from pathlib import Path
from textwrap import indent

# ──────────────────────────────────────────────────────────────────────────────
# Helpers
# ──────────────────────────────────────────────────────────────────────────────

_ROOT_DEFAULT = Path.cwd()
_IGNORE_DEFAULT = {".git", ".hg", ".svn", "node_modules", ".venv", ".pytest_cache"}

CODE_EXTS = {".py", ".js", ".jsx", ".ts", ".tsx", ".mjs"}
TEMPLATE_EXTS = {".html", ".md", ".toml", ".yaml", ".yml"}

# Regexes
_RE_DEF   = re.compile(r"^\s*(?:def|function)\s+([A-Za-z0-9_.$-]+)")
_RE_CLASS = re.compile(r"^\s*class\s+([A-Za-z0-9_.$-]+)")
_RE_SUMMARY = re.compile(r"^\s*(?:#|//|/\*|<!--)\s*(.+?)\s*(?:\*/|-->)*\s*$")

# ──────────────────────────────────────────────────────────────────────────────
# Core logic
# ──────────────────────────────────────────────────────────────────────────────

def walk_directory(root: Path, ignore: set[Path]) -> list[Path]:
    """Yield all project files beneath *root*, skipping *ignore* dirs."""
    files: list[Path] = []
    for path in root.rglob("*"):
        if any(p in ignore for p in path.parts):
            continue
        if path.is_file():
            files.append(path)
    return files


def extract_summary_and_defs(path: Path) -> tuple[str, list[str]]:
    """Return a (summary, defs) tuple for *path*."""
    summary: str = "(no summary)"
    defs: list[str] = []

    try:
        with path.open("r", encoding="utf-8", errors="ignore") as f:
            for i, line in enumerate(f):
                if i == 0:  # summary → first comment line (if any)
                    m = _RE_SUMMARY.match(line)
                    if m:
                        summary = m.group(1).strip()

                # function / class defs
                for regex in (_RE_DEF, _RE_CLASS):
                    m = regex.match(line)
                    if m:
                        defs.append(m.group(1))
    except Exception as exc:  # noqa: BLE001
        summary = f"⚠️ Could not read file ({exc})"
        defs = []

    return summary, defs


def detect_tailwind_version(root: Path) -> str | None:
    """Try to sniff the Tailwind CSS version from package.json or config."""
    pkg_json = root / "package.json"
    if pkg_json.exists():
        try:
            data = json.loads(pkg_json.read_text())
            deps = data.get("dependencies", {}) | data.get("devDependencies", {})
            for k in ("tailwindcss", "@tailwindcss/postcss7-compat"):
                if k in deps:
                    return deps[k].lstrip("^~")
        except Exception:  # noqa: BLE001
            pass

    # fallback: look for explicit comment in tailwind.config.js
    cfg = root / "tailwind.config.js"
    if cfg.exists():
        text = cfg.read_text()
        m = re.search(r"tailwindcss(?:@| v)?\s*([\d.]+)", text, flags=re.I)
        if m:
            return m.group(1)

    return None


def find_missing_layouts(root: Path) -> list[str]:
    """Return slug paths that appear to lack a dedicated layout."""
    layout_root = root / "layouts"
    content_root = root / "content"

    # Find sections in /content/ (first folder after root/content)
    sections = {p.relative_to(content_root).parts[0]
                for p in content_root.rglob("*") if p.is_file()}
    missing: list[str] = []
    for sec in sorted(sections):
        if not (layout_root / sec / "single.html").exists():
            missing.append(f"layouts/{sec}/single.html")
    return missing


# ──────────────────────────────────────────────────────────────────────────────
# Markdown rendering
# ──────────────────────────────────────────────────────────────────────────────

def render_markdown(
    files: list[Path],
    summaries: dict[Path, tuple[str, list[str]]],
    root: Path,
) -> str:
    """Build full Markdown for Logic Index."""
    now = _dt.datetime.now().strftime("%Y-%m-%d %H:%M")
    overview = [
        f"# Logic Index – generated {now}",
        "",
        f"*Total files scanned:* **{len(files):,}**",
    ]

    # File type counts
    counts: dict[str, int] = {}
    for p in files:
        ext = p.suffix.lower() or "[no-ext]"
        counts[ext] = counts.get(ext, 0) + 1
    overview.append(
        "*By extension:* "
        + ", ".join(f"`{ext}` × {n}" for ext, n in sorted(counts.items()))
    )

    # Tailwind version
    tailwind_ver = detect_tailwind_version(root)
    overview.append(f"*Tailwind CSS version:* `{tailwind_ver or 'unknown'}`")

    # Hugo site params
    cfg_toml = root / "config.toml"
    if cfg_toml.exists():
        m = re.search(r'baseURL\s*=\s*"(.*?)"', cfg_toml.read_text())
        if m:
            overview.append(f"*Hugo baseURL:* `{m.group(1)}`")

    # Missing layouts
    missing_layouts = find_missing_layouts(root)
    if missing_layouts:
        overview.append(
            "*Missing `single.html` layouts:* "
            + ", ".join(f"`{m}`" for m in missing_layouts)
        )

    md_lines: list[str] = overview + ["", "---", ""]

    # Per-file detail
    for path in sorted(files, key=lambda p: str(p)):
        rel = path.relative_to(root)
        summary, defs = summaries[path]
        md_lines.append(f"### `{rel}`\n")
        md_lines.append(f"**Summary**: {summary}\n")
        if defs:
            md_lines.append("**Definitions**:")
            for d in defs:
                md_lines.append(f"- `{d}`")
        else:
            md_lines.append("**Definitions**:\n- `(no defs)`")
        md_lines.append("")  # blank between files

    return "\n".join(md_lines)


# ──────────────────────────────────────────────────────────────────────────────
# CLI
# ──────────────────────────────────────────────────────────────────────────────

def main() -> None:
    parser = argparse.ArgumentParser(
        description="Generate a project-wide logic index (Markdown)."
    )
    parser.add_argument("root", nargs="?", default=_ROOT_DEFAULT,
                        help="Project root (default: current dir)")
    parser.add_argument("-o", "--output", default="logic-index.md",
                        help="Path to write result (default: logic-index.md)")
    parser.add_argument("--ignore", nargs="+", default=[],
                        help="Additional top-level paths to ignore")
    args = parser.parse_args()

    root = Path(args.root).resolve()
    ignore = _IGNORE_DEFAULT | {Path(p).name for p in args.ignore}

    files = walk_directory(root, ignore)
    summaries = {p: extract_summary_and_defs(p) for p in files}

    markdown = render_markdown(files, summaries, root)
    Path(args.output).write_text(markdown, encoding="utf-8")
    print(f"✅  Wrote {args.output} ({len(files)} files summarised)")


if __name__ == "__main__":
    main()
